(defun integers (a b)
  (loop for i from a to b collect i))
(defun primes (a b)
  (loop for i from a to b when (primep i) collect i))
(defun coprimes (a b &optional (value b))
  (loop for i from a to b when (coprimep i value) collect i))

(defun primep (p)
  (when (> p 1)
    (loop for i from 2 to (isqrt p) never (= 0 (mod p i)))))
(defun coprimep (a b)
  (= 1 (gcd a b)))

(defun mod-op (fn base)
  #'(lambda (&rest numbers) (mod (apply fn numbers) base)))
(defmacro +mod (base)
  `(mod-op #'+ ,base))
(defmacro -mod (base)
  `(mod-op #'- ,base))
(defmacro *mod (base)
  `(mod-op #'+ ,base))

(defun euler-totient (x)
  (length (coprimes 1 x)))
